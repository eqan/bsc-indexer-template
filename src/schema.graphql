# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Collections {
  collectionId: String!
  name: String!
  slug: String!
  bannerImageUrl: String!
  externalUrl: String!
  imageUrl: String!
  twitterUserName: String!
  discordUrl: String!
  description: String!
  tokens: [Tokens!]
}

type Tokens {
  tokenId: String!
  name: String!
  metaDataIndexed: Boolean!
  imageUrl: String!
  attributes: String!
  description: String!
}

type GetAllTokens {
  items: [Tokens!]!
  total: Float!
}

type GetAllCollections {
  items: [Collections!]!
  total: Int!
}

type DataOriginFee {
  account: String!
  value: Int!
}

type Data {
  type: String!
  originFees: DataOriginFee!
}

type MakeType {
  type: String!
  contract: String!
  tokenId: Int!
}

type Make {
  value: Int!
  type: MakeType!
}

type Orders {
  orderId: String!
  fill: Float!
  status: String!
  makeStock: Float!
  cancelled: Boolean!
  createdAt: DateTime!
  lastUpdatedAt: DateTime!
  maker: String!
  Make: Make!
  take: Make!
  salt: String!
  data: Data!
  startedAt: DateTime!
  endedAt: DateTime!
  optionalRoyalties: Boolean!
  dbUpdatedAt: DateTime!
  makePrice: Float!
  takePrice: Float!
  makePriceUsed: Float!
  takePriceUsed: Float!
  signature: String!
  taker: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GetAllOrders {
  items: [Orders!]!
  total: Int!
}

input DataOrginFeeInput {
  account: String!
  value: Int!
}

input DataInput {
  type: String!
  originFees: DataOrginFeeInput!
}

input MakeTypeInput {
  type: String!
  contract: String!
  tokenId: Int!
}

input MakeInput {
  value: Int!
  type: MakeTypeInput!
}

type Query {
  GetAllCollections(filterCollectionDto: FilterDto!): GetAllCollections!
  ShowCollectionById(collectionId: String!): Collections!
  GetAllTokens(searchToken: FilterTokenDto!): GetAllTokens!
  ShowTokenById(tokenId: String!): Tokens!
  GetOrderById(orderId: String!): Orders!
  GetAllOrders(GetAllOrders: FilterOrderDto!): GetAllOrders!
}

input FilterDto {
  page: Float
  limit: Float
  collectionId: String
  name: String
}

input FilterTokenDto {
  page: Float
  limit: Int
  tokenId: String
  name: String
}

input FilterOrderDto {
  page: Float
  limit: Float
  orderId: String
  maker: String
  taker: String
}

type Mutation {
  CreateCollection(createCollection: CreateCollectionsInput!): Collections!
  UpdateCollectionAttribute(updateCollectionsInput: UpdateCollectionsInput!): Collections!
  DeleteCollections(DeleteCollectionInput: DeleteCollectionsInput!): Collections
  CreateToken(CreateTokensInput: CreateTokenInput!): Tokens!
  UpdateTokenAttribute(UpdateTokensInput: UpdateTokensInput!): Tokens!
  DeleteToken(DeleteTokenInput: DeleteTokensInput!): Tokens
  CreateOrder(CreateOrderInput: CreateOrdersInput!): Orders!
  DeleteOrder(Delete: DeleteOrderInput!): Orders!
  UpdateOrderStatus(UpdateOrderStatus: UpdateOrderStatus!): Orders!
}

input CreateCollectionsInput {
  collectionId: String!
  name: String!
  slug: String!
  bannerImageUrl: String
  externalUrl: String
  imageUrl: String
  twitterUserName: String
  discordUrl: String
  description: String
}

input UpdateCollectionsInput {
  collectionId: String!
  bannerImageUrl: String
  externalUrl: String
  imageUrl: String
  twitterUserName: String
  discordUrl: String
  description: String
}

input DeleteCollectionsInput {
  id: [String!]!
}

input CreateTokenInput {
  tokenId: String!
  collectionId: String!
  name: String!
  metaDataIndexed: Boolean!
  imageUrl: String
  attributes: String
  description: String
}

input UpdateTokensInput {
  tokenId: String!
  name: String
  description: String
  imageUrl: String
}

input DeleteTokensInput {
  id: [String!]!
}

input CreateOrdersInput {
  orderId: String!
  fill: Float!
  status: String!
  makeStock: Float!
  cancelled: Boolean!
  createdAt: DateTime!
  lastUpdatedAt: DateTime!
  maker: String!
  Make: MakeInput!
  take: MakeInput!
  salt: String!
  data: DataInput!
  startedAt: DateTime!
  endedAt: DateTime!
  optionalRoyalties: Boolean!
  dbUpdatedAt: DateTime!
  makePrice: Float!
  takePrice: Float!
  makePriceUsed: Float!
  takePriceUsed: Float!
  signature: String!
  taker: String
}

input DeleteOrderInput {
  id: [String!]!
}

input UpdateOrderStatus {
  orderId: String!
  status: String!
}