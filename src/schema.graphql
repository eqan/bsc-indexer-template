# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BlockChainInfo {
  transactionHash: String!
  blockHash: String!
  blockNumber: Int!
  logIndex: Int!
}

type Activity {
  id: String!
  type: String!
  owner: String!
  date: DateTime!
  lastUpdatedAt: DateTime!
  cursor: String!
  reverted: Boolean!
  contract: String!
  tokenId: Float!
  itemId: String!
  value: Float!
  transactionHash: String!
  blockChainInfo: BlockChainInfo!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GetAllActivities {
  items: [Activity!]!
  total: Int!
}

type Collections {
  collectionId: String!
  name: String!
  slug: String!
  bannerImageUrl: String!
  externalUrl: String!
  imageUrl: String!
  twitterUserName: String!
  discordUrl: String!
  description: String!
  tokens: [Tokens!]
}

type Tokens {
  tokenId: String!
  name: String!
  metaDataIndexed: Boolean!
  imageUrl: String!
  attributes: String!
  description: String!
}

type GetAllTokens {
  items: [Tokens!]!
  total: Float!
}

type GetAllCollections {
  items: [Collections!]!
  total: Int!
}

input BlockChainInfoInput {
  transactionHash: String!
  blockHash: String!
  blockNumber: Int!
  logIndex: Int!
}

type Query {
  GetAllCollections(filterCollectionDto: FilterDto!): GetAllCollections!
  ShowCollectionById(collectionId: String!): Collections!
  GetAllTokens(searchToken: FilterTokenDto!): GetAllTokens!
  ShowTokenById(tokenId: String!): Tokens!
  GetActivityById(activityId: String!): Activity!
  GetAllActivities(GetAllActivities: FilterActivityDto!): GetAllActivities!
}

input FilterDto {
  page: Float
  limit: Float
  collectionId: String
  name: String
}

input FilterTokenDto {
  page: Float
  limit: Int
  tokenId: String
  name: String
}

input FilterActivityDto {
  page: Float
  limit: Float
  id: String!
}

type Mutation {
  CreateCollection(createCollection: CreateCollectionsInput!): Collections!
  UpdateCollectionAttribute(updateCollectionsInput: UpdateCollectionsInput!): Collections!
  DeleteCollections(DeleteCollectionInput: DeleteCollectionsInput!): Collections
  CreateToken(CreateTokensInput: CreateTokenInput!): Tokens!
  UpdateTokenAttribute(UpdateTokensInput: UpdateTokensInput!): Tokens!
  DeleteToken(DeleteTokenInput: DeleteTokensInput!): Tokens
  CreateActivity(CreateActivityInput: CreateActivityInput!): Activity!
  DeleteActivity(DeleteActivityInput: DeleteActivityInput!): Activity!
  UpdateActivityAttribute(UpdateActivityInput: UpdateActivity!): Activity!
}

input CreateCollectionsInput {
  collectionId: String!
  name: String!
  slug: String!
  bannerImageUrl: String
  externalUrl: String
  imageUrl: String
  twitterUserName: String
  discordUrl: String
  description: String
}

input UpdateCollectionsInput {
  collectionId: String!
  bannerImageUrl: String
  externalUrl: String
  imageUrl: String
  twitterUserName: String
  discordUrl: String
  description: String
}

input DeleteCollectionsInput {
  id: [String!]!
}

input CreateTokenInput {
  tokenId: String!
  collectionId: String!
  name: String!
  metaDataIndexed: Boolean!
  imageUrl: String
  attributes: String
  description: String
}

input UpdateTokensInput {
  tokenId: String!
  name: String
  description: String
  imageUrl: String
}

input DeleteTokensInput {
  id: [String!]!
}

input CreateActivityInput {
  type: OrderTypeEnum!
  owner: String!
  cursor: String!
  reverted: Boolean!
  contract: String!
  tokenId: Float!
  itemId: String!
  value: Float!
  transactionHash: String!
  blockChainInfo: BlockChainInfoInput!
}

enum OrderTypeEnum {
  TRANSFER
  MINT
  BURN
  BID
  LIST
  SELL
  CANCEL_LIST
  CANCEL_BID
  AUCTION_BID
  AUCTION_CREATED
  AUCTION_CANCEL
  AUCTION_FINISHED
  AUCTION_STARTED
  AUCTION_ENDED
}

input DeleteActivityInput {
  id: [String!]!
}

input UpdateActivity {
  id: String!
  type: OrderTypeEnum!
  owner: String!
  cursor: String!
  reverted: Boolean!
  itemId: String!
  value: Float!
  transactionHash: String!
  blockChainInfo: BlockChainInfoInput!
}